# VNC-enabled Dockerfile for GUI Browser Sessions
FROM ubuntu:22.04

# Avoid prompts from apt
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC

# Set working directory
WORKDIR /app

# Install system dependencies including VNC and noVNC
RUN apt-get update && apt-get install -y \
    # Basic system tools
    curl \
    wget \
    gnupg \
    ca-certificates \
    software-properties-common \
    build-essential \
    net-tools \
    procps \
    supervisor \
    nginx \
    # Python and Node.js
    python3 \
    python3-pip \
    python3-venv \
    # VNC server and desktop environment
    tightvncserver \
    fluxbox \
    xterm \
    # X11 and display
    xvfb \
    x11-utils \
    xauth \
    dbus-x11 \
    # Browser dependencies
    fonts-liberation \
    libappindicator3-1 \
    libasound2 \
    libatk-bridge2.0-0 \
    libdrm2 \
    libgtk-3-0 \
    libnspr4 \
    libnss3 \
    libxcomposite1 \
    libxdamage1 \
    libxrandr2 \
    xdg-utils \
    libxss1 \
    libgconf-2-4 \
    chromium-browser \
    fonts-dejavu-core \
    # Additional tools
    nano \
    vim \
    git \
    unzip \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js 18
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y nodejs

# Install noVNC
RUN mkdir -p /opt/noVNC/utils/websockify \
    && wget -qO- https://github.com/novnc/noVNC/archive/v1.3.0.tar.gz | tar xz --strip 1 -C /opt/noVNC \
    && wget -qO- https://github.com/novnc/websockify/archive/v0.10.0.tar.gz | tar xz --strip 1 -C /opt/noVNC/utils/websockify \
    && chmod +x /opt/noVNC/utils/websockify/run

# Copy package files and install dependencies
COPY backend/package*.json ./backend/
COPY requirements.txt .
RUN cd backend && npm install --only=production
RUN pip3 install -r requirements.txt

# Install Playwright and browsers
RUN python3 -m playwright install chromium
RUN python3 -m playwright install-deps

# Copy application code
COPY . .

# Create necessary directories
RUN mkdir -p \
    /app/sessions \
    /app/logs \
    /app/vnc \
    /root/.vnc \
    /root/.config/chromium \
    /var/log/supervisor

# Set up VNC password (you should change this in production)
RUN echo "vncpassword" | vncpasswd -f > /root/.vnc/passwd \
    && chmod 600 /root/.vnc/passwd

# Create VNC startup script
RUN echo '#!/bin/bash\n\
export USER=root\n\
export HOME=/root\n\
export DISPLAY=:1\n\
\n\
# Kill any existing VNC servers\n\
vncserver -kill :1 2>/dev/null || true\n\
\n\
# Start VNC server\n\
vncserver :1 -geometry 1920x1080 -depth 24 -dpi 96\n\
\n\
# Wait for VNC server to start\n\
sleep 3\n\
\n\
# Start fluxbox window manager\n\
DISPLAY=:1 fluxbox &\n\
\n\
# Keep the script running\n\
tail -f /dev/null' > /usr/local/bin/start-vnc.sh \
    && chmod +x /usr/local/bin/start-vnc.sh

# Create fluxbox startup script
RUN mkdir -p /root/.fluxbox \
    && echo '#!/bin/bash\n\
# Fluxbox startup script\n\
xsetroot -solid "#2c3e50"\n\
exec fluxbox' > /root/.fluxbox/startup \
    && chmod +x /root/.fluxbox/startup

# Create VNC xstartup script
RUN echo '#!/bin/bash\n\
xrdb $HOME/.Xresources\n\
xsetroot -solid grey\n\
export XKL_XMODMAP_DISABLE=1\n\
exec /root/.fluxbox/startup' > /root/.vnc/xstartup \
    && chmod +x /root/.vnc/xstartup

# Create supervisor configuration
RUN echo '[supervisord]\n\
nodaemon=true\n\
user=root\n\
logfile=/var/log/supervisor/supervisord.log\n\
pidfile=/var/run/supervisord.pid\n\
\n\
[program:vnc]\n\
command=/usr/local/bin/start-vnc.sh\n\
autostart=true\n\
autorestart=true\n\
stderr_logfile=/var/log/supervisor/vnc.err.log\n\
stdout_logfile=/var/log/supervisor/vnc.out.log\n\
\n\
[program:novnc]\n\
command=/opt/noVNC/utils/websockify/run --web /opt/noVNC 6080 localhost:5901\n\
autostart=true\n\
autorestart=true\n\
stderr_logfile=/var/log/supervisor/novnc.err.log\n\
stdout_logfile=/var/log/supervisor/novnc.out.log\n\
\n\
[program:session-api]\n\
command=python3 /app/session_api.py\n\
directory=/app\n\
autostart=true\n\
autorestart=true\n\
stderr_logfile=/var/log/supervisor/session-api.err.log\n\
stdout_logfile=/var/log/supervisor/session-api.out.log\n\
environment=DISPLAY=":1",PYTHONPATH="/app"' > /etc/supervisor/conf.d/supervisord.conf

# Create nginx configuration for noVNC
RUN echo 'server {\n\
    listen 8080;\n\
    server_name localhost;\n\
    \n\
    location / {\n\
        proxy_pass http://localhost:6080;\n\
        proxy_http_version 1.1;\n\
        proxy_set_header Upgrade $http_upgrade;\n\
        proxy_set_header Connection "upgrade";\n\
        proxy_set_header Host $host;\n\
        proxy_set_header X-Real-IP $remote_addr;\n\
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\
        proxy_set_header X-Forwarded-Proto $scheme;\n\
        proxy_read_timeout 86400;\n\
    }\n\
}' > /etc/nginx/sites-available/novnc \
    && ln -s /etc/nginx/sites-available/novnc /etc/nginx/sites-enabled/ \
    && rm /etc/nginx/sites-enabled/default

# Set environment variables
ENV DISPLAY=:1
ENV VNC_DISPLAY=:1
ENV NOVNC_PORT=6080
ENV NGINX_PORT=8080
ENV SESSION_API_PORT=3001

# Expose ports
EXPOSE 3001 6080 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:3001/health || exit 1

# Start supervisor to manage all services
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"] 